#!/bin/sh

##==============================================================================
##
## configuredir
## rootrelative
## root
##     Determine the root directory of the distribution (not necessarily the
##     same as the current directory, since configure can be run anywhere).
##
##==============================================================================

configuredir=`pwd`
rootrelative=`dirname $0`
cd $rootrelative
root=`pwd`
cd $configuredir


##==============================================================================
##
## Product, Version, and Bilddate information:
##
##==============================================================================

product="OMIScriptProvider"
fullproduct="OMI Provider for scripting languages for Linux"

# MI_MAJOR and other items are dependent on a rational version number
# As a result, if version file can't be found, consider it fatal and
# don't generate a bogus one

if [ -f ../omiscriptprovider.version ]; then
    . ../omiscriptprovider.version
fi

if [ -n "$OMISCRIPTPROVIDER_BUILDVERSION_MAJOR" -a -n "$OMISCRIPTPROVIDER_BUILDVERSION_MINOR" -a -n "$OMISCRIPTPROVIDER_BUILDVERSION_PATCH" -a -n "$OMISCRIPTPROVIDER_BUILDVERSION_BUILDNR" ]; then
    major=$OMISCRIPTPROVIDER_BUILDVERSION_MAJOR
    minor=$OMISCRIPTPROVIDER_BUILDVERSION_MINOR
    revision=$OMISCRIPTPROVIDER_BUILDVERSION_PATCH
    patch_level=$OMISCRIPTPROVIDER_BUILDVERSION_BUILDNR
else
    echo "*** UNABLE TO LOCATE FILE omiscriptprovider.version ***" >& 2
    exit 1
fi

version="$major.$minor.$revision"
version_with_release="$major.$minor.$revision-$patch_level"
date=`date`


##==============================================================================
##
## Get command line options that start with slash.
##
##==============================================================================

for opt
do

  arg=`expr "x$opt" : 'x[^=]*=\(.*\)'`

  case $opt in

    -h | --help)
      help=1
      ;;

    --outputdirname=*)
      outputdirname=$arg
      ;;

    --python-version=*)
      pythonversion=$arg
      ;;


    *)
        echo "$0: unknown option:  $opt"
        exit 1
        ;;

  esac
done


##==============================================================================
##
## Print the help message
##
##==============================================================================

if [ "$help" = "1" ]; then

    cat<<EOF

Usage: ./configure [OPTIONS]
OVERVIEW:
This script configures OMIScriptProvider for building. Type the following commands.
    $ ./configure
    $ make
OPTIONS:
    -h, --help              Print this help message.
    --outputdirname         The name of the output directory where the binary
                            files are placed. This name must not contain
                            slashes.
    --python-version        The python version for which to compile the
                            package. The name should contain only the version.
                            Example: "--python-version 2.7"
EOF
    exit 0
fi


##==============================================================================
##
## Check if the given Python version is supported. Defaults to version 2.7
## Update the files with the given python version
##
##==============================================================================

if [ -z "$pythonversion" ]; then
    pythonversion=2.7
fi

supported_python_versions="2.6 2.7 3.4 3.5 3.6"
echo "$supported_python_versions" | grep $pythonversion 2>&1 > /dev/null
if [ $? != 0 ]; then
    echo "Python version $pythonversion is not supported"
    echo "Supported python versions: $supported_python_versions"
    exit 1
fi

python_name="python$pythonversion"

command -v $python_name 2>&1 > /dev/null
if [ $? != 0 ]; then
    echo "Python version $pythonversion was not found on the system"
    exit 1
fi

files_to_update="
    $root/provider/GNUmakefile-template
    $root/python/client.py-template
    $root/installbuilder/Base_OMIScriptProvider.data-template
    $root/GNUmakefile-template
"
for file in $files_to_update
do
    # Remove "-template" from the filename to get the target file
    target_file=`echo -n "$file" | head -c -9`
    if [ -f $target_file ]; then
        echo "Warning! This will replace the existing file $target_file"
        read -r -p "Are you sure? [Y/n]" response
        response=`echo $response | tr '[:upper:]' '[:lower:]'`
        if echo $response | grep -Eq '(no|n)'; then
            echo "configure stopped!"
            exit 1
        fi
    fi
    cp $file $target_file
    sed -i"*" "s|__PYTHON_VERSION__|$python_name|g" $target_file
    if [ "$(basename $target_file)" = "Base_OMIScriptProvider.data" ]; then
        # Replace the extension name inside the package data
        # Python 3 adds an extra string in the file name (ex: omi.cpython-34m.so)
        python_extension_name=`$python_name -c "import sysconfig; print (sysconfig.get_config_var('SO'))"`
        python_extension_name="omi$python_extension_name"
        sed -i"*" "s|__PYTHON_EXTENSION_NAME__|$python_extension_name|g" $target_file
    fi
done

echo "configured for Python $pythonversion"


##==============================================================================
##
## Create output directories.
##
##==============================================================================

if [ -z "$outputdirname" ]; then
    outputdirname=output
fi

outputdir=$configuredir/$outputdirname

mkdir -p $outputdir
echo "created $outputdir"


##==============================================================================
##
## Create config.mak file
##
##==============================================================================

fn=$outputdir/config.mak

cat > $fn <<EOF
# CAUTION: This file was generated by 'configure' script.
CONFIG_PRODUCT=$product
CONFIG_FULLPRODUCT=$fullproduct
CONFIG_VERSION=$version
CONFIG_MAJOR=$major
CONFIG_MINOR=$minor
CONFIG_REVISION=$revision
CONFIG_OMI_SCRIPTPROVIDER_VERSION_BUILD=$patch_level
CONFIG_DATE=$date
CONFIG_PYTHON_VERSION=$pythonversion

CONFIG_MAK=1

OSP_OUTPUTDIR=$outputdir
OSP_OUTPUTDIRNAME=$outputdirname
EOF

echo "created $fn"
